{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red241\green241\blue241;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c70196;\cssrgb\c100000\c100000\c100000;\cssrgb\c95686\c95686\c95686;
\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320\sa210\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The goal of this competition is to predict a Windows machine\'92s probability of getting infected by various families of malware, based on different properties of that machine. The telemetry data containing these properties and the machine infections was generated by combining heartbeat and threat reports collected by Microsoft's endpoint protection solution, Windows Defender.\
Each row in this dataset corresponds to a machine, uniquely identified by a\'a0
\f1 \cb4 MachineIdentifier
\f0 \cb3 .\'a0
\f1 \cb4 HasDetections
\f0 \cb3 \'a0is the ground truth and indicates that Malware was detected on the machine. Using the information and labels in\'a0
\f1 \cb4 train.csv
\f0 \cb3 , you must predict the value for\'a0
\f1 \cb4 HasDetections
\f0 \cb3 \'a0for each machine in\'a0
\f1 \cb4 test.csv
\f0 \cb3 .\
The sampling methodology used to create this dataset was designed to meet certain business constraints, both in regards to user privacy as well as the time period during which the machine was running. Malware detection is inherently a time-series problem, but it is made complicated by the introduction of new machines, machines that come online and offline, machines that receive patches, machines that receive new operating systems, etc. While the dataset provided here has been roughly split by time, the complications and sampling requirements mentioned above may mean you may see imperfect agreement between your cross validation, public, and private scores! Additionally, this dataset is not representative of Microsoft customers\'92 machines in the wild; it has been sampled to include a much larger proportion of malware machines.\
\pard\pardeftab720\sl460\sa320\partightenfactor0

\fs40 \cf5 \strokec5 Columns\
\pard\pardeftab720\sl320\sa210\partightenfactor0

\fs28 \cf2 \strokec2 Unavailable or self-documenting column names are marked with an "NA".\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\sa80\partightenfactor0
\ls1\ilvl0
\f1 \cf2 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 MachineIdentifier
\f0 \cb3 \'a0- Individual machine ID\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 ProductName
\f0 \cb3 \'a0- Defender state information e.g. win8defender\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 EngineVersion
\f0 \cb3 \'a0- Defender state information e.g. 1.1.12603.0\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AppVersion
\f0 \cb3 \'a0- Defender state information e.g. 4.9.10586.0\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AvSigVersion
\f0 \cb3 \'a0- Defender state information e.g. 1.217.1014.0\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IsBeta
\f0 \cb3 \'a0- Defender state information e.g. false\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 RtpStateBitfield
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IsSxsPassiveMode
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 DefaultBrowsersIdentifier
\f0 \cb3 \'a0- ID for the machine's default browser\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AVProductStatesIdentifier
\f0 \cb3 \'a0- ID for the specific configuration of a user's antivirus software\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AVProductsInstalled
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AVProductsEnabled
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 HasTpm
\f0 \cb3 \'a0- True if machine has tpm\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CountryIdentifier
\f0 \cb3 \'a0- ID for the country the machine is located in\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 CityIdentifier
\f0 \cb3 \'a0- ID for the city the machine is located in\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 OrganizationIdentifier
\f0 \cb3 \'a0- ID for the organization the machine belongs in, organization ID is mapped to both specific companies and broad industries\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 GeoNameIdentifier
\f0 \cb3 \'a0- ID for the geographic region a machine is located in\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 LocaleEnglishNameIdentifier
\f0 \cb3 \'a0- English name of Locale ID of the current user\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Platform
\f0 \cb3 \'a0- Calculates platform name (of OS related properties and processor property)\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Processor
\f0 \cb3 \'a0- This is the process architecture of the installed operating system\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 OsVer
\f0 \cb3 \'a0- Version of the current operating system\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 OsBuild
\f0 \cb3 \'a0- Build of the current operating system\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 OsSuite
\f0 \cb3 \'a0- Product suite mask for the current operating system.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 OsPlatformSubRelease
\f0 \cb3 \'a0- Returns the OS Platform sub-release (Windows Vista, Windows 7, Windows 8, TH1, TH2)\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 OsBuildLab
\f0 \cb3 \'a0- Build lab that generated the current OS. Example: 9600.17630.amd64fre.winblue_r7.150109-2022\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 SkuEdition
\f0 \cb3 \'a0- The goal of this feature is to use the Product Type defined in the MSDN to map to a 'SKU-Edition' name that is useful in population reporting. The valid Product Type are defined in %sdxroot%\\data\\windowseditions.xml. This API has been used since Vista and Server 2008, so there are many Product Types that do not apply to Windows 10. The 'SKU-Edition' is a string value that is in one of three classes of results. The design must hand each class.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IsProtected
\f0 \cb3 \'a0- This is a calculated field derived from the Spynet Report's AV Products field. Returns: a. TRUE if there is at least one active and up-to-date antivirus product running on this machine. b. FALSE if there is no active AV product on this machine, or if the AV is active, but is not receiving the latest updates. c. null if there are no Anti Virus Products in the report. Returns: Whether a machine is protected.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 AutoSampleOptIn
\f0 \cb3 \'a0- This is the SubmitSamplesConsent value passed in from the service, available on CAMP 9+\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 PuaMode
\f0 \cb3 \'a0- Pua Enabled mode from the service\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 SMode
\f0 \cb3 \'a0- This field is set to true when the device is known to be in 'S Mode', as in, Windows 10 S mode, where only Microsoft Store apps can be installed\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 IeVerIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 SmartScreen
\f0 \cb3 \'a0- This is the SmartScreen enabled string value from registry. This is obtained by checking in order, HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\\SmartScreenEnabled and HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\SmartScreenEnabled. If the value exists but is blank, the value "ExistsNotSet" is sent in telemetry.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Firewall
\f0 \cb3 \'a0- This attribute is true (1) for Windows 8.1 and above if windows firewall is enabled, as reported by the service.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 UacLuaenable
\f0 \cb3 \'a0- This attribute reports whether or not the "administrator in Admin Approval Mode" user type is disabled or enabled in UAC. The value reported is obtained by reading the regkey HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_MDC2FormFactor
\f0 \cb3 \'a0- A grouping based on a combination of Device Census level hardware characteristics. The logic used to define Form Factor is rooted in business and industry standards and aligns with how people think about their device. (Examples: Smartphone, Small Tablet, All in One, Convertible...)\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_DeviceFamily
\f0 \cb3 \'a0- AKA DeviceClass. Indicates the type of device that an edition of the OS is intended for. Example values: Windows.Desktop, Windows.Mobile, and iOS.Phone\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OEMNameIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OEMModelIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_ProcessorCoreCount
\f0 \cb3 \'a0- Number of logical cores in the processor\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_ProcessorManufacturerIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_ProcessorModelIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_ProcessorClass
\f0 \cb3 \'a0- A classification of processors into high/medium/low. Initially used for Pricing Level SKU. No longer maintained and updated\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_PrimaryDiskTotalCapacity
\f0 \cb3 \'a0- Amount of disk space on primary disk of the machine in MB\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_PrimaryDiskTypeName
\f0 \cb3 \'a0- Friendly name of Primary Disk Type - HDD or SSD\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_SystemVolumeTotalCapacity
\f0 \cb3 \'a0- The size of the partition that the System volume is installed on in MB\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_HasOpticalDiskDrive
\f0 \cb3 \'a0- True indicates that the machine has an optical disk drive (CD/DVD)\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_TotalPhysicalRAM
\f0 \cb3 \'a0- Retrieves the physical RAM in MB\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_ChassisTypeName
\f0 \cb3 \'a0- Retrieves a numeric representation of what type of chassis the machine has. A value of 0 means xx\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_InternalPrimaryDiagonalDisplaySizeInInches
\f0 \cb3 \'a0- Retrieves the physical diagonal length in inches of the primary display\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_InternalPrimaryDisplayResolutionHorizontal
\f0 \cb3 \'a0- Retrieves the number of pixels in the horizontal direction of the internal display.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_InternalPrimaryDisplayResolutionVertical
\f0 \cb3 \'a0- Retrieves the number of pixels in the vertical direction of the internal display\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_PowerPlatformRoleName
\f0 \cb3 \'a0- Indicates the OEM preferred power management profile. This value helps identify the basic form factor of the device\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_InternalBatteryType
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_InternalBatteryNumberOfCharges
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSVersion
\f0 \cb3 \'a0- Numeric OS version Example - 10.0.10130.0\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSArchitecture
\f0 \cb3 \'a0- Architecture on which the OS is based. Derived from OSVersionFull. Example - amd64\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSBranch
\f0 \cb3 \'a0- Branch of the OS extracted from the OsVersionFull. Example - OsBranch = fbl_partner_eeap where OsVersion = 6.4.9813.0.amd64fre.fbl_partner_eeap.140810-0005\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSBuildNumber
\f0 \cb3 \'a0- OS Build number extracted from the OsVersionFull. Example - OsBuildNumber = 10512 or 10240\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSBuildRevision
\f0 \cb3 \'a0- OS Build revision extracted from the OsVersionFull. Example - OsBuildRevision = 1000 or 16458\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSEdition
\f0 \cb3 \'a0- Edition of the current OS. Sourced from HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion@EditionID in registry. Example: Enterprise\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSSkuName
\f0 \cb3 \'a0- OS edition friendly name (currently Windows only)\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSInstallTypeName
\f0 \cb3 \'a0- Friendly description of what install was used on the machine i.e. clean\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSInstallLanguageIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSUILocaleIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_OSWUAutoUpdateOptionsName
\f0 \cb3 \'a0- Friendly name of the WindowsUpdate auto-update settings on the machine.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsPortableOperatingSystem
\f0 \cb3 \'a0- Indicates whether OS is booted up and running via Windows-To-Go on a USB stick.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_GenuineStateName
\f0 \cb3 \'a0- Friendly name of OSGenuineStateID. 0 = Genuine\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_ActivationChannel
\f0 \cb3 \'a0- Retail license key or Volume license key for a machine.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsFlightingInternal
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsFlightsDisabled
\f0 \cb3 \'a0- Indicates if the machine is participating in flighting.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_FlightRing
\f0 \cb3 \'a0- The ring that the device user would like to receive flights for. This might be different from the ring of the OS which is currently installed if the user changes the ring after getting a flight from a different ring.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_ThresholdOptIn
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_FirmwareManufacturerIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_FirmwareVersionIdentifier
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsSecureBootEnabled
\f0 \cb3 \'a0- Indicates if Secure Boot mode is enabled.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsWIMBootEnabled
\f0 \cb3 \'a0- NA\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsVirtualDevice
\f0 \cb3 \'a0- Identifies a Virtual Machine (machine learning model)\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsTouchEnabled
\f0 \cb3 \'a0- Is this a touch device ?\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsPenCapable
\f0 \cb3 \'a0- Is the device capable of pen input ?\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Census_IsAlwaysOnAlwaysConnectedCapable
\f0 \cb3 \'a0- Retreives information about whether the battery enables the device to be AlwaysOnAlwaysConnected .\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Wdft_IsGamer
\f0 \cb3 \'a0- Indicates whether the device is a gamer device or not based on its hardware combination.\cb1 \
\ls1\ilvl0
\f1 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Wdft_RegionIdentifier
\f0 \cb3 \'a0- NA\cb1 \
}